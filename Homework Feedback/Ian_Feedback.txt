1. Code review from “Arm week 3” partner
I liked the amount of comments you put it, well documented functions with clear descriptions of what they do, but did not bog reading the code down with excessive comments. Also clear usage of the python standards for function documentation well done. The high level functions seem logically laid out.
I think I would keep a few things as instance variables, I moved the arm kinematics (AK) object to be a class variable of the motion control class. This fits with code modularity as only the motion class should be dealing with the arm kinematics.

2. Code review of “Arm week 3” partner’s wor
It looks like you used descriptive function names and variables with _ for spaces, so that's good. Your class names are also CamelCase, which also follows "best practices" from what I understand.  There's some individual comments sprinkled throughout the code to help describe what important lines of code are doing, which is also helpful. There's not too many comments that it drowns the code, which I appreciate. Your variables are also grouped together by type, which makes your code much easier to read.
One thing you could have done is add some way of debugging your work, such as a def test() function or logging methods. It looks like there were some global variables in ColorTrackingMain.py, so those could have been replaced with function inputs or self.variables. I'm not a big fan of Global variables, so I try to remove them when I can. Overall nice job on your code this week!
Also, I like how light your code is. I feel I have a lot of unnecessary bloat I haven't had time to get rid of, so extra props! :D

3. Progress update for your project:
	a. Group Members: Nigel Swenson, Ameer Helmi, Ryan Quick
	b. One paragraph description of project code
	We're currently bouncing between two different projects. 
	The first is finding and stacking cubes atop eachother, then moving the whole stack, and finally tipping over the stack.
	The second is throwing a cube with the gripper, which could be incorporated into the first project depending on how the project progresses.
	For the first idea, the code will look for cubes, attempt a grasp, check if successful and retry if failed. Then the code will choose a throwing position goal, and part way there, a separate thread that controls the gripper will trigger to release the cube. Depending on how this goes, we may need to dive past the api to make the arm move faster. 


	c.Flow chart or other high-level description of how your project code is expected to work
	For the second idea, the code will look for all cubes and save their position. Then it will attempt a first grasp, and repeat if failed. Then it will move to another cube's position and attempt to drop off the cube. The code will then look for the number of cubes in view, and repeat until there's just the one cube showing. This would mean that the cubes have all been stacked. 
	d. Description of where you are in the design/implementation process
	We're still ironing out what project we want to do by the end of the term. We have updated code that should be easy to interact with. Our next steps will be testing out dual action processing using threading to see if we can do multiple actuations at once. 

4.  What did you learn this week?
This week has been primarily planning for what we want to do for our project. We're currently down to two ideas. Learning has been primarily looking into how threading works as well as better understanding the workings of the arm's api. 
